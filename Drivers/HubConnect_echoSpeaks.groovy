/*
 *	Copyright 2019 Steve White
 *
 *	Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *	use this file except in compliance with the License. You may obtain a copy
 *	of the License at:
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *	License for the specific language governing permissions and limitations
 *	under the License.
 *
 *
 */
metadata
{
	definition(name: "HubConnect echoSpeaks", namespace: "shackrat", author: "Steve White")
	{
		capability "SpeechSynthesis"
		capability "Refresh"
		capability "AudioVolume"
		capability "Actuator"

		// Autogenerated attributes 
////////////////////////////////////////////////////////////////////////////////////////////////////
//// Commented out 2020-02-11
//// 		attribute "audioTrackData", "string"
//// 		attribute "btDevicesPaired", "string"
//// 		attribute "doNotDisturb", "string"
//// 		attribute "lastSpeakCmd", "string"
//// 		attribute "lastUpdated", "string"
//// 		attribute "mediaSource", "string"
//// 		attribute "mute", "string"
//// 		attribute "status", "string"
//// 		attribute "trackDescription", "string"
//// 		attribute "trackImage", "string"
//// 		attribute "trackImageHtml", "string"
//// 		
////////////////////////////////////////////////////////////////////////////////////////////////////
		attribute "version", "string"
		attribute "wasLastSpokenToDevice", "string"
		attribute "lastUpdated", "string"
		attribute "DeviceWatch-DeviceStatus", "string"


////////////////////////////////////////////////////////////////////////////////////////////////////
//// Commented out 2020-02-11
//// 		
//// 		command "getBluetoothDevices"
//// 		command "getDeviceActivity"
//// 		command "disconnectBluetooth"
//// 		command "doNotDisturbOn"
//// 		command "doNotDisturbOff"
//// 		command "connectBluetooth", ["string"]
////////////////////////////////////////////////////////////////////////////////////////////////////
		command "sync"
		command "executeSequenceCommand", ["string"]
		command "stopAllDevices"
		command "togglePlayback"		
		command "searchSpotify", ["string"]
	}
}


/*
	installed
*/
def installed()
{
	initialize()
}


/*
	updated
*/
def updated()
{
	initialize()
}


/*
	initialize
*/
def initialize()
{
	refresh()
}


/*
	refresh
*/
def refresh()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "refresh")
}

def stopAllDevices(){
 	parent.sendDeviceEvent(device.deviceNetworkId, "stopAllDevices")
}

def searchSpotify(search){
	parent.sendDeviceEvent(device.deviceNetworkId, "searchSpotify", [search])
}

def togglePlayback(){
	parent.sendDeviceEvent(device.deviceNetworkId, "togglePlayback")
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//// Commented out 2020-02-11
//// 

//// 

//// 
//// def getBluetoothDevices(){
//// 	parent.sendDeviceEvent(device.deviceNetworkId, "getBluetoothDevices")
//// }
//// 
//// def getDeviceActivity(){
//// 	parent.sendDeviceEvent(device.deviceNetworkId, "getDeviceActivity")
//// }
//// 
//// 
//// def disconnectBluetooth(){
//// 	parent.sendDeviceEvent(device.deviceNetworkId, "disconnectBluetooth")
//// }
//// 
//// 
//// def doNotDisturbOn(){
//// 	parent.sendDeviceEvent(device.deviceNetworkId, "doNotDisturbOn")
//// }
//// 
//// 
//// def doNotDisturbOff(){
//// 	parent.sendDeviceEvent(device.deviceNetworkId, "doNotDisturbOff")
//// }
////////////////////////////////////////////////////////////////////////////////////////////////////


def mute()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "mute")
}


/*
	unmute
    
	Turns the speaker off.
*/
def unmute()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "unmute")
}


/*
	setVolume
    
	Adjust the volume.
*/
def setVolume(value)
{
	// The server will update volume status
	parent.sendDeviceEvent(device.deviceNetworkId, "setVolume", [value])
}


/*
	speak
    
	sends TTS words.
*/
def speak(value)
{
	// The server will update strobe status
	parent.sendDeviceEvent(device.deviceNetworkId, "speak", [value])
}

def executeSequenceCommand(value){
	parent.sendDeviceEvent(device.deviceNetworkId, "executeSequenceCommand", [value])
}
/*
	volumeUp
    
	Turns up the speaker volume.
*/
def volumeUp()
{
	// The server will update speaker status
	parent.sendDeviceEvent(device.deviceNetworkId, "volumeUp")
}


/*
	volumeDown
    
	Turns down the speaker volume.
*/
def volumeDown()
{
	// The server will update speaker status
	parent.sendDeviceEvent(device.deviceNetworkId, "volumeDown")
}



/*
	sync
*/
def sync()
{
	// The server will respond with updated status and details
	parent.syncDevice(device.deviceNetworkId, "omnipurpose")
	sendEvent([name: "version", value: "v${driverVersion.major}.${driverVersion.minor}.${driverVersion.build}"])
}
def getDriverVersion() {[platform: "Hubitat", major: 1, minor: 2, build: 0]}
