/*
 *	Copyright 2019 Steve White
 *
 *	Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *	use this file except in compliance with the License. You may obtain a copy
 *	of the License at:
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *	License for the specific language governing permissions and limitations
 *	under the License.
 *
 *
 *  Primary purpose is to allow Rule Machine number variable connectors that have been
 *  mapped to temperature measurement to sync over HubConnect
 *  2020-04-07 Brett Error
 *
 */
import groovy.json.JsonSlurper
metadata
{
	definition(name: "HubConnect settableTemperatureMeasurement", namespace: "shackrat", author: "Steve White", importUrl: "https://raw.githubusercontent.com/shimbone/Scrubitat/master/Drivers/HubConnect_settableTemperatureMeasurement.groovy")
	{
		capability "Sensor"
		capability "TemperatureMeasurement"
		capability "Refresh"


		// Autogenerated attributes 
		attribute "version", "string"

		command "setTemperature", ["number"]
		command "sync"
	}
}

/*
	installed
*/
def installed()
{
	initialize()
}


/*
	updated
*/
def updated()
{
	initialize()
}


/*
	initialize
*/
def initialize()
{
	refresh()
}

def setTemperature(value){
	parent.sendDeviceEvent(device.deviceNetworkId, "setTemperature", [value])
}



/*
	refresh
*/
def refresh()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "refresh")
}


/*
	sync
*/
def sync()
{
	// The server will respond with updated status and details
	parent.syncDevice(device.deviceNetworkId, "omnipurpose")
	sendEvent([name: "version", value: "v${driverVersion.major}.${driverVersion.minor}.${driverVersion.build}"])
}
def getDriverVersion() {[platform: "Hubitat", major: 1, minor: 0, build: 0]}

